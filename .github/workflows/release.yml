name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - '*'

env:
  # update with the name of the main binary
  binary: gear-born
  add_binaries_to_github_release: true
  use_git_lfs: false

jobs:

  # Build for Linux Environments
  release-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-08-07
          components: clippy, rustfmt
          profile: minimal
          targets: x86_64-unknown-linux-gnu

      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install -y \
            pkg-config libx11-dev libasound2-dev libudev-dev \
            libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev zip

      - name: Set Cargo Target Directory
        run: echo "CARGO_TARGET_DIR=target" >> $GITHUB_ENV

      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r assets linux/ || true
          cp -r config linux/ || true

      - name: Package as a zip
        working-directory: ./linux
        run: zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: linux
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-linux-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Windows Environments
  release-windows:
    runs-on: windows-latest

    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-08-07
          components: clippy, rustfmt
          profile: minimal
          targets: x86_64-pc-windows-msvc

      - name: Build
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Prepare package
        shell: pwsh
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          mkdir assets -ea 0
          cp -r assets windows/
          mkdir config -ea 0
          cp -r config windows/

      - name: Package as a zip
        shell: pwsh
        run: Compress-Archive -Path windows/* -DestinationPath ${{ env.binary }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: windows
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-windows-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for macOS x86_64 Environments
  release-macOS-intel:
    runs-on: macOS-latest

    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-08-07
          components: clippy, rustfmt
          profile: minimal
          targets: x86_64-apple-darwin

      - name: Build
        env:
          CFLAGS: -fno-stack-check
          MACOSX_DEPLOYMENT_TARGET: "10.9"
        run: cargo build --release --target x86_64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/x86_64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/ || true
          cp -r config ${{ env.binary }}.app/Contents/MacOS/ || true
          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-macOS-intel.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}-macOS-intel.dmg
          name: macOS-intel
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-macOS-intel.dmg
          asset_name: ${{ env.binary }}-macOS-intel-${{ steps.get_version.outputs.tag }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  # Build for macOS Apple Silicon Environments
  release-macOS-apple-silicon:
    runs-on: macOS-latest

    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2025-08-07
          components: clippy, rustfmt
          profile: minimal
          targets: aarch64-apple-darwin

      - name: Build
        env:
          MACOSX_DEPLOYMENT_TARGET: "11"
        run: cargo build --release --target aarch64-apple-darwin

      - name: Prepare Package
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/aarch64-apple-darwin/release/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          cp -r assets ${{ env.binary }}.app/Contents/MacOS/ || true
          cp -r config ${{ env.binary }}.app/Contents/MacOS/ || true
          hdiutil create -fs HFS+ -volname "${{ env.binary }}-macOS-apple-silicon" -srcfolder ${{ env.binary }}.app ${{ env.binary }}-macOS-apple-silicon.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}-macOS-apple-silicon.dmg
          name: macOS-apple-silicon
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-macOS-apple-silicon.dmg
          asset_name: ${{ env.binary }}-macOS-apple-silicon-${{ steps.get_version.outputs.tag }}.dmg
          tag: ${{ github.ref }}
          overwrite: true
